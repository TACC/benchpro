#!/usr/bin/env python3

# System Imports
import argparse
import os
import pprint as pp
import sys

# Local Imports
try:
	import src.bencher as bencher
	import src.builder as builder
	import src.global_settings as global_settings
	import src.input_handler as input_handler
	import src.result_handler as result_handler
	import src.splash as splash

except ImportError as e:
	print("You had an import error, you might be using Python2. Please run 'source sourceme'")
	print(e)
	sys.exit(1)

def main():
	# Parse cmdline args
	cmd_parser = argparse.ArgumentParser(
		description='This is a builder tool for managing appliation benchmarks.')

	cmd_parser.add_argument("--build", default=False,
							type=str, help="Name of the code cfg file to build")
	cmd_parser.add_argument("--sched", default="system",
							type=str, help="Name of the scheduler cfg file.")

	cmd_parser.add_argument("--bench", default=False,
							type=str, help="Run an installed application, run '--installed' for valid options.")
	cmd_parser.add_argument("--params", default=False,
							type=str, help="Config file containing run parameters.")

	cmd_parser.add_argument("--capture", default=False, action='store_true',
							help="Send result to database, WIP.")
	cmd_parser.add_argument("--listResults", default=False,
							help="Provide summary of benchmarks results. Takes 'pending', 'complete', 'captured', 'failed' or 'all'")
	cmd_parser.add_argument("--removeResult", default=False,
							help="Deletes benchmark result from local directory, takes benchmark label, 'captured', 'failed' or 'all'")
	
	cmd_parser.add_argument("--clean", default=False, action='store_true',
							help="Cleanup temp and log files.")
	cmd_parser.add_argument("--installed", default=False, action='store_true',
							help="Show all installed applications.")
	cmd_parser.add_argument("--avail", default=False, action='store_true',
							help="Show all available application profiles.")
	cmd_parser.add_argument("--remove", default=False,
							help="Remove an installed application.")

	cmd_parser.add_argument("--queryApp", default=False,
							help="Query build report of an installed application.")
	cmd_parser.add_argument("--queryResult", default=False,
							help="Query a local benchmark result for config info.")
	cmd_parser.add_argument("--queryDB", default=False,
							help="Query database for results matching search criteria. Accepts comma-delimited list of search criteria. Use 'all' to display all results in db.")
	

	cmd_parser.add_argument("--setting", default=False,
							help="Override a setting in settings.cfg. Accepts comma-delimited list of assignments.")


	print()

	args = cmd_parser.parse_args()

	# Get global settings
	gs = global_settings.init()

	# override settings.cfg
	if args.setting:
		settings_list = args.setting.split(',')
		for setting in settings_list:
			pair = setting.split('=')
			if pair[0] == 'dry_run':
				if pair[1] == "True": 
					gs.dry_run = True
					print("Set " + pair[0] + "=" + str(gs.dry_run) )
				elif pair[1] == "False": 
					gs.dry_run = False
					print("Set " + pair[0] + "=" + str(gs.dry_run) )
				else:
					print("WARNING: Invalid input: " + pair[0] + "=" + pair[1])
			else: 
				print("WARNING: no matching setting for '" + pair[0] + "'")
		print()

	# Use system default scheduler profile
	if args.sched == "system":
		args.sched = "slurm-" + os.getenv('TACC_SYSTEM') + ".cfg"

	handler = input_handler.init(gs)

	# Start builder
	if args.build:
		splash.print_splash(gs)
		builder.build_code(args, gs)

	# Start bencher
	elif args.bench:
		splash.print_splash(gs)
		bencher.run_bench(args, gs)

	# Start capture
	elif args.capture:
		splash.print_splash(gs)
		result_handler.capture_result(args, gs)

	# Cleanup and exit
	elif args.clean:
		handler.clean_temp_files()

	# Show installed and exit
	elif args.installed:
		handler.show_installed()

	# Show available and exit
	elif args.avail:
		handler.show_available()

	# Remove installation and exit
	elif args.remove:
		handler.remove_app(args.remove)

	# Query installation and exit
	elif args.queryApp:
		handler.query_app(args.queryApp)

	# Query db for results
	elif args.queryDB:
		result_handler.query_db(args.queryDB, gs)

	# Show results and exit
	elif args.listResults:
		result_handler.list_results(args.listResults, gs)

	# Query result and exit
	elif args.queryResult:
		result_handler.query_result(args.queryResult, gs)

	# Remove result and exit
	elif args.removeResult:
		result_handler.remove_result(args.removeResult, gs)

	# No seletion provided
	else:
		print("Try 'benchtool --help' for more information.")

	print()
	return 0

if __name__ == "__main__":
	sys.exit(main())

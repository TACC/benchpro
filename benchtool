#!/usr/bin/env python3

# System Imports
import argparse
import os
import pprint as pp
import sys
from timeit import default_timer as timer


# Local Imports
try:
    import src.bencher as bencher
    import src.builder as builder
    import src.global_settings as global_settings
    import src.input_handler as input_handler
    import src.result_handler as result_handler
    import src.splash as splash
    import src.validate_setup as validate

except ImportError as e:
    print("You had an import error, you might be using Python2 ?")
    print("Please setup your environment with 'source sourceme'")
    print(e)
    sys.exit(1)

# Generate dict fom coma-delimited params
def get_var_overload_dict(vars_str):
    overload_dict = {} 
    if vars_str:
        settings_list = vars_str.split(':')
        for setting in settings_list:
            pair = setting.split('=')
            overload_dict[pair[0]] = pair[1]

    return overload_dict

# Write command line to history file
def write_cmd_history(glob):
    if not glob.args.history:
        history_file = os.path.join(glob.basedir, ".history")
        with open(history_file, "a") as hist: 
            hist.write(sys.argv[0].split("/")[-1] + " " + " ".join(sys.argv[1:]) + "\n")

def main():
    # Parse cmdline args
    cmd_parser = argparse.ArgumentParser(
        description='This is a benchmarking tool to automate the installation of applications, \
                    execution of benchmarks and collection of results.')

    cmd_parser.add_argument("--build", default=False,
                            type=str, help="Name of the code config file to build, run --avail to check.")
    cmd_parser.add_argument("--sched", default="system",
                            type=str, help="Name of the scheduler config file, will use system default otherwise.")

    cmd_parser.add_argument("--bench", default=False,
                            type=str, help="Name of benchmark config file to bench, run --avail to check.")

    cmd_parser.add_argument("--capture", default=False, action='store_true',
                            help="Send results to database.")
    cmd_parser.add_argument("--listResults", default=False,
                            help="Provide summary of benchmarks results. Takes 'pending', 'complete', 'captured', \
                                    'failed' or 'all'")
    cmd_parser.add_argument("--removeResult", default=False,
                            help="Deletes benchmark result from local directory, takes benchmark label, 'captured', \
                                    'failed' or 'all'")
    
    cmd_parser.add_argument("--clean", default=False, action='store_true',
                            help="Cleanup temp and log files.")
    cmd_parser.add_argument("--installed", default=False, action='store_true',
                            help="Show all installed applications.")
    cmd_parser.add_argument("--avail", default=False, action='store_true',
                            help="Show all available application profiles.")

    cmd_parser.add_argument("--defaults", default=False, action='store_true',
                            help="Print default options from settings.ini")

    cmd_parser.add_argument("--remove", default=False,
                            help="Remove an installed application.")

    cmd_parser.add_argument("--queryApp", default=False,
                            help="Query build report of an installed application.")
    cmd_parser.add_argument("--queryResult", default=False,
                            help="Query a local benchmark result for config info.")
    cmd_parser.add_argument("--queryDB", default=False,
                            help="Query database for results matching search criteria. Accepts colon-delimited list \
                                    of search criteria. Use 'all' to display all results in db.")
    cmd_parser.add_argument("--export", default=False, action='store_true',
                            help="Export database query to .csv file dbquery_[date].csv")

    cmd_parser.add_argument("--history", default=False, action='store_true',
                                help="Print benchtool input history.")

    cmd_parser.add_argument("--last", nargs='?', const=1, type=int,
                                help="Print query from last build or bench task.")

    cmd_parser.add_argument("--overload", default=False,
                            help="Override any setting read from cfg files. Accepts colon-delimited list of assignments.")
    cmd_parser.add_argument("--validate", default=False, action='store_true',
                            help="Run installation validator.")

    cmd_parser.add_argument("--version", default=False, action='store_true',
                            help="Print version info.")

    args = cmd_parser.parse_args()

    # Init global settings
    glob = global_settings.settings()
    # Add arg dict to global object
    glob.args = args

    # Write cmd to history file
    write_cmd_history(glob)

    # Get overload dict
    glob.overload_dict = get_var_overload_dict(args.overload)

    # Use system default scheduler profile
    if glob.args.sched == "system":
        glob.args.sched = "slurm_" + os.getenv('TACC_SYSTEM')

    handler = input_handler.init(glob)

    # Start builder
    if args.build:
        splash.print_splash(glob)
        builder.init(glob)

    # Start bencher
    elif args.bench:
        splash.print_splash(glob)
        bencher.init(glob)

    # Start capture
    elif args.capture:
        splash.print_splash(glob)
        result_handler.capture_result(glob)

    # Cleanup and exit
    elif args.clean:
        handler.clean_temp_files()

    # Show installed and exit
    elif args.installed:
        handler.show_installed()

    # Print defaults
    elif args.defaults:
        handler.print_defaults()

    # Show available and exit
    elif args.avail:
        handler.show_available_codes()
        handler.show_available_benches()
        handler.show_available_suites()

    # Remove installation and exit
    elif args.remove:
        handler.remove_app()

    # Query installation and exit
    elif args.queryApp:
        handler.query_app(args.queryApp)

    # Print cmd line history
    elif args.history:
        handler.print_history()

    # Query db for results
    elif args.queryDB:
        result_handler.query_db(glob)

    # Show results and exit
    elif args.listResults:
        result_handler.list_results(glob)

    # Query result and exit
    elif args.queryResult:
        result_handler.query_result(glob, args.queryResult)

    # Remove result and exit
    elif args.removeResult:
        result_handler.remove_result(glob)

    elif args.validate:
        validate.check_setup(glob)

    elif args.version:
        handler.print_version()

    elif args.last:
        handler.print_last()

    # No seletion provided
    else:
        print("Invalid input")
        print("Try 'benchtool --help' for more information.")

    print()
    return 0

if __name__ == "__main__":
    sys.exit(main())

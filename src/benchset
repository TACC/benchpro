#!/usr/bin/env python3
#
# BenchSET
# A little tool to automatically apply changes to BenchPRO's settings files
# Matthew Cawood
# July 2022
# v2.0

import configparser
import os
import sys

settings_file = os.path.join(os.environ.get("BP_HOME"), "user.ini")


# Convert various input dtypes to bool type, if expecting bool type
def fmat(new_value: str, old_value: str) -> str:
    # Bool stored as string
    if str(old_value) in ["True", "False"]:
        # Inputs that map to True
        if new_value in ["1", "T", "t", "True", "true"]:
            return "True"
        # Inputs that map to False
        elif new_value in ["0", "F", "f", "False", "false"]:
            return "False"
    # Not bool type
    return new_value


# Print a setting matching input selection, if None print all
def print_setting(select: str=None):
    with open(settings_file, 'r') as settings:
        for line in settings.readlines():
            if not select or (select in line):
                print(line.strip())


# Update a setting value with input
def change_setting(kv: list):

    # Split input list
    new_key, new_val = kv

    # Read file
    with open(settings_file, 'r') as settings:
        filedata = settings.read()

    # Replace the target string
    lines = filedata.split("\n")

    # Drop trailing line
    if lines[-1] == "":
        del lines[-1]

    found = False
    for n in range(len(lines)):
        old_key = lines[n].split("=")[0].strip()
        old_val = lines[n].split("=")[1].strip()
        if old_key == new_key:
            fmat_val = fmat(new_val, old_val)
            print(new_key + ": " + old_val + " -> " + fmat_val)
            lines[n] = new_key.ljust(24, " ") + "= " + fmat_val
            found = True
            break

    if not found:
        print("Adding new setting: '" + new_key + "=" + new_val + "'")
        lines.append(new_key.ljust(24, " ") + "= " + new_val + "\n")

    # Write the file out again
    s_file = os.path.join(os.environ.get("BP_HOME"), "user.ini")
    with open(s_file, 'w') as file:
        file.write("\n".join(lines))


# Remove key-value from settings file matching input key
def drop_setting(key: str):

    lines = None
    dropped = False

    with open(settings_file, 'r') as fp:
        lines = fp.readlines()

    with open(settings_file, 'w') as fp:
        for line in lines:
            if line.split("=")[0].strip() == key:
                dropped = True
            else:
                fp.write(line)

    if not dropped:
        print_setting()
        print("\nNo keys match '" + key + "'")


def main():

    # Check user.ini is present
    if not os.path.isfile(settings_file):
        print("File validation required, run:")
        print("bp --validate")
        sys.exit(1)

    # Print list
    if len(sys.argv) == 1:
        print_setting()
    # Print specific
    elif len(sys.argv) == 2:

        if sys.argv[1] in ['-h', '--help']:
            print(
                """
                Benchsetter (BPS) is used to change default parameters used
                by BenchPRO.
                Usage: bps
                    List user's current defaults (default, no arguments)

                Usage: bps [PARAM]
                    Print value of input parameter key

                Usage: bps [KEY=VALUE]
                    Update value of parameter KEY to VALUE

                -a, --add       Optional flag to add new parameter key-value.
                                Assumed if no flag is provided.
                -d, --drop      Remove parameter KEY from defaults.

                """)

        elif "=" in sys.argv[1]:
            # Change setting
            change_setting(sys.argv[1].split("="))
        else:
            # Print keyvalue
            print_setting(sys.argv[1])
    # Op flag supplied
    elif len(sys.argv) == 3:

        if sys.argv[1] in ["--add", "-a"]:
            change_setting(sys.argv[2].split("="))

        elif sys.argv[1] in ["--drop", "-d"]:
            drop_setting(sys.argv[2])

        else:
            print("Unknown input format")
            print("Expected --add/-a or --drop/-d")
            sys.exit(1)

    else:
        print ("Unknown input format, expected 'bps [key]=[value]'")
        sys.exit(1)
    sys.exit(0)

if __name__ == "__main__":
    sys.exit(main())

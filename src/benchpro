#!/usr/bin/env python3

# Main executable file for BenchPRO utility
# Performs argument handling, inits glob data structure and starts the appropriate task handler
# Matthew Cawod
# June 2022

# System Imports
import argparse
import os
from packaging import version
import sys
import traceback

# Local Imports
try:
    import src.bench_manager    as  bench_manager
    import src.build_manager    as  build_manager
    import src.global_settings  as  global_settings
    import src.notices          as  notices
    import src.splash           as  splash

# Catch import exception
except ImportError as e:
    print("Python import error!")
    print(traceback.format_exc())
    print(e)
    sys.exit(1)


# Catch exception in a handler, write to log and quit
def catch_major_exception(glob, e):

    print("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
    print("It appears something has gone wrong!")

    if not glob:
        print("Failed to create global obj")

    elif glob.log:
        glob.log.debug(traceback.format_exc())

    print(traceback.format_exc())
    print(e)
    print("Quitting.")
    sys.exit(1)


# Get cmdline arguments
def get_arguments():

    # Parse cmdline args
    cmd_parser = argparse.ArgumentParser(
        description='This is a benchmarking tool to automate the installation of applications, \
                    execution of benchmarks and collection of results.')

    cmd_parser.add_argument(
        "--force",
        default=False,
        action='store_true',
        help="Forcibly delete multiple applications/benchmarks meeting your selection criteria.")

    cmd_parser.add_argument(
        "--notices",
        default=False,
        action='store_true',
        help="Print notices and quit.")

    cmd_parser.add_argument(
        "--env",
        default=False,
        action='store_true',
        help="Print environment variables and quit.")

    cmd_parser.add_argument(
        "--settings",
        default=False,
        help="Provide .ini file with nonstandard install paths.")

    cmd_parser.add_argument(
        "-b",
        "--build",
        default=False,
        nargs='+',
        type=str,
        help="Name of the code config file to build, run --avail to check. Accepts list.")

    cmd_parser.add_argument(
        "--sched",
        default=False,
        type=str,
        help="Name of the scheduler config file, will use system default otherwise.")

    cmd_parser.add_argument(
        "-B",
        "--bench",
        default=False,
        nargs='+',
        type=str,
        help="Name of benchmark config file to bench, run --avail to check. Accepts list.")

    cmd_parser.add_argument(
        "-C",
        "--capture",
        default=False,
        action='store_true',
        help="Send results to database.")

    cmd_parser.add_argument(
        "-lr",
        "--listResults",
        nargs='?',
        const="all",
        type=str,
        help="Provide summary of benchmarks results. Default is 'all', also takes 'complete', 'captured' or \
                                    'failed'")

    cmd_parser.add_argument(
        "-dr",
        "--delResult",
        default=False,
        nargs='+',
        help="Deletes benchmark result from local directory, takes benchmark label, 'captured', 'failed' or 'all'")

    cmd_parser.add_argument(
        "-c",
        "--clean",
        default=False,
        action='store_true',
        help="Cleanup temp and log files.")

    cmd_parser.add_argument(
        "-la",
        "--listApps",
        default=False,
        action='store_true',
        help="Show all installed applications.")

    cmd_parser.add_argument(
        "-a",
        "--avail",
        nargs='?',
        const="all",
        type=str,
        help="Show all available application profiles. Default is 'all', also accepts 'code', 'bench' or 'suite'.")

    cmd_parser.add_argument(
        "-d",
        "--defaults",
        default=False,
        action='store_true',
        help="Print default options for current system.")

    cmd_parser.add_argument(
        "-da",
        "--delApp",
        default=False,
        help="Remove an installed application.")

    cmd_parser.add_argument(
        "-qa",
        "--queryApp",
        default=False,
        help="Query build report of an installed application.")

    cmd_parser.add_argument(
        "-qr",
        "--queryResult",
        default=False,
        help="Query a local benchmark result for config info.")

    cmd_parser.add_argument(
        "--dbList",
        nargs='?',
        const="all",
        type=str,
        help="Query database for benchmark results. Default is 'all'. Accepts comma delimited list \
                                    of key-value pairs as search criteria (username=mcawood,system=frontera).")

    cmd_parser.add_argument(
        "--dbResult",
        default=False,
        type=str,
        help="Provide result job ID to print info report from database.")

    cmd_parser.add_argument(
        "--dbApp",
        default=False,
        type=str,
        help="Provide application ID to print info report from database.")

    cmd_parser.add_argument(
        "--export",
        default=False,
        action='store_true',
        help="Export database query to .csv file dbquery_[date].csv")

    cmd_parser.add_argument("--history", default=False, action='store_true',
                            help="Print BenchPRO input history.")

    cmd_parser.add_argument("-L", "--last", nargs='?', const=1, type=int,
                            help="Print query from last build or bench task.")

    cmd_parser.add_argument(
        "-o",
        "--overload",
        default=False,
        nargs='+',
        help="Override any setting read from cfg files. OVERLOAD is a list of key-value pairs of the form key=value")


    cmd_parser.add_argument(
        "--keys",
        default=False,
        action="store_true",
        help="Print list of all BenchPRO parameter keys.")

    cmd_parser.add_argument(
        "--purge",
        default=False,
        action='store_true',
        help="Delete all local user files. Forever(!).")

    cmd_parser.add_argument(
        "-V",
        "--validate",
        default=False,
        action='store_true',
        help="Run installation validator.")

    cmd_parser.add_argument(
        "-v",
        "--version",
        default=False,
        action='store_true',
        help="Print version info.")

    return cmd_parser.parse_args()


# Initialize the global object
def init_glob() -> object:
    glob = global_settings.setup(get_arguments())
    return glob


def main():

    glob = None
    args = get_arguments()

    if args.notices:
        notices.print_notices(False, True)

    # No input = print notice
    #no_input = True
    #for key in args.__dict__:
    #    if args.__dict__[key]:
    #        no_input = False
    #if no_input:
    #    notices.info()

    # Set default for sched input
    args.sched = "system"

    # Create glob obj
    glob = None
    try:
        glob = init_glob()
    except Exception as e:
        catch_major_exception(glob, e)

    # Add args to glob
    glob.args = args

    # Start build manager
    if glob.args.build:
        try:
            build_manager.init(glob)
        except Exception as e:
            catch_major_exception(glob, e)

    # Start bench manager
    elif glob.args.bench:
        try:
            bench_manager.init(glob)
        except Exception as e:
            catch_major_exception(glob, e)

    # Start result manager
    elif glob.args.capture:
        try:
            glob.lib.capture.results()
        except Exception as e:
            catch_major_exception(glob, e)

    # Cleanup and exit
    elif glob.args.clean:
        glob.lib.misc.clean_temp_files()
    # Show installed and exit
    elif glob.args.listApps:
        glob.lib.misc.show_installed()
    # Print defaults settings
    elif glob.args.defaults:
        glob.lib.misc.print_defaults()
    # Print BP_ and BPS_ EVs
    elif glob.args.env:
        glob.lib.misc.print_env()
    # Show available and exit
    elif glob.args.avail:
        glob.lib.misc.show_available()
    # Remove installation and exit
    elif glob.args.delApp:
        glob.lib.misc.remove_app(None)
    # Query installation and exit
    elif glob.args.queryApp:
        glob.lib.misc.query_app(glob.args.queryApp)
    # Print cmd line history
    elif glob.args.history:
        glob.lib.misc.print_history()
    # Print result list from db
    elif glob.args.dbList:
        glob.lib.db.list_results()
    # Query db for result
    elif glob.args.dbResult:
        glob.lib.db.result_report()
    # Query db for application
    elif glob.args.dbApp:
        glob.lib.db.app_report()
    # Show results and exit
    elif glob.args.listResults:
        glob.lib.msg.print_result_table()
    # Query result and exit
    elif glob.args.queryResult:
        glob.lib.result.query()
    # Remove result and exit
    elif glob.args.delResult:
        glob.lib.result.remove()
    elif glob.args.keys:
        glob.lib.misc.print_keys()
    # Purge user files
    elif glob.args.purge:
        glob.lib.files.purge()
        #print("Purge disabled for now...")
    elif glob.args.version:
        glob.lib.misc.print_version()
    elif glob.args.last:
        glob.lib.misc.print_last()

    #Print notices
    elif glob.args.notices:
        notices.print_notices(False, True)

    elif not glob.args.validate:
        notices.print_notices(False, False)

    return 0

if __name__ == "__main__":
    sys.exit(main())

#!/usr/bin/env python3

# System Imports
import argparse
import os
import pprint as pp
import sys
from timeit import default_timer as timer

# Local Imports
try:
    import src.bench_manager as bench_manager
    import src.build_manager as build_manager 
    import src.global_settings as global_settings
    import src.installer as installer
    import src.result_manager as result_manager
    import src.validate as validate

# Catch import exception
except ImportError as e:
    print("You had an import error, you might be using Python2?")
    print("Please setup your environment with 'source sourceme'")
    print(e)
    sys.exit(1)

def main():
    # Parse cmdline args
    cmd_parser = argparse.ArgumentParser(
        description='This is a benchmarking tool to automate the installation of applications, \
                    execution of benchmarks and collection of results.')

    cmd_parser.add_argument("--install", default=False, action='store_true',
                            help="Install user files, accepts [--settings [FILE], or will use path defaults in src/data/install.ini")

    cmd_parser.add_argument("--uninstall", default=False, action='store_true',
                            help="Uninstall user files, application and result directories.")

    cmd_parser.add_argument("--update", default=False, action='store_true',
                            help="Update local user files from benchtool package.")

    cmd_parser.add_argument("--settings", default=False,
                            help="Provide .ini file with nonstandard install paths.")


    cmd_parser.add_argument("-b", "--build", default=False, nargs='+',
                            type=str, help="Name of the code config file to build, run --avail to check. Accepts space delimited list.")
    cmd_parser.add_argument("--sched", default="system",
                            type=str, help="Name of the scheduler config file, will use system default otherwise.")

    cmd_parser.add_argument("-B", "--bench", default=False, nargs='+',
                            type=str, help="Name of benchmark config file to bench, run --avail to check. Accepts space delimited list.")

    cmd_parser.add_argument("-C", "--capture", default=False, action='store_true',
                            help="Send results to database.")
    cmd_parser.add_argument("-lr", "--listResults", nargs='?', const="all", type=str,
                            help="Provide summary of benchmarks results. Default is 'all', also takes 'complete', 'complete', 'captured' or \
                                    'failed'")
    cmd_parser.add_argument("-dr", "--delResult", default=False, nargs='+',
                            help="Deletes benchmark result from local directory, takes space delimited benchmark label, 'captured', \
                                    'failed' or 'all'")
    
    cmd_parser.add_argument("-c", "--clean", default=False, action='store_true',
                            help="Cleanup temp and log files.")
    cmd_parser.add_argument("-la", "--listApps", default=False, action='store_true',
                            help="Show all installed applications.")
    cmd_parser.add_argument("-a", "--avail", nargs='?', const="all", type=str,
                            help="Show all available application profiles. Default is 'all', also accepts 'code', 'bench' or 'suite'.")

    cmd_parser.add_argument("-d", "--defaults", default=False, action='store_true',
                            help="Print default options for current system.")

    cmd_parser.add_argument("-da", "--delApp", default=False, nargs='+',
                            help="Remove an installed application. Accepts space delimited list.")

    cmd_parser.add_argument("-qa", "--queryApp", default=False,
                            help="Query build report of an installed application.")
    cmd_parser.add_argument("-qr", "--queryResult", default=False,
                            help="Query a local benchmark result for config info.")
    cmd_parser.add_argument("--dbResult", nargs='?', const="all", type=str,
                            help="Query database for benchmark results. Default is 'all'. Also accepts colon-delimited list \
                                    of search criteria.")
    cmd_parser.add_argument("--dbApp", default=False, type=str, help="Provide application ID to print info report from database.")

    cmd_parser.add_argument("--export", default=False, action='store_true',
                            help="Export database query to .csv file dbquery_[date].csv")

    cmd_parser.add_argument("--history", default=False, action='store_true',
                                help="Print benchtool input history.")

    cmd_parser.add_argument("-L", "--last", nargs='?', const=1, type=int,
                                help="Print query from last build or bench task.")

    cmd_parser.add_argument("-o", "--overload", default=False, nargs='+',
                            help="Override any setting read from cfg files. Accepts space delimited list of assignments.")
    cmd_parser.add_argument("-V", "--validate", default=False, action='store_true',
                            help="Run installation validator.")

    cmd_parser.add_argument("-v", "--version", default=False, action='store_true',
                            help="Print version info.")

    args = cmd_parser.parse_args()

    # Install user project files
    if args.install:
        installer.install(args.settings)
        args.validate = True

    # Remove user project files
    if args.uninstall:
        installer.uninstall()
        sys.exit(0)

    # Recopy user files
    if args.update:
        installer.update()
        args.validate = True

    # Installation directoy set by module
    try:
        basedir = os.environ['BT_HOME']
    except:
        print("$BT_HOME not set. Load benchtool module. Aborting!")
        sys.exit(1)

    # Check installed
    if not os.path.isfile(os.path.join(basedir, ".installed")):
        print("Please run benchtool --install before continuing.")
        print()
        sys.exit(1)

    # Init global settings
    glob = global_settings.settings(basedir)

    # Add arg dict to global object
    glob.args = args

    # Run validator script
    if args.validate:
        validate.check_setup(glob)
        sys.exit(0)

    # Check validated
    if not os.path.isfile(os.path.join(basedir, ".validated")):
        print("Please run  benchtool --validate before continuing.")
        print()
        sys.exit(1)
    
    # Write cmd to history file
    glob.lib.write_cmd_history(sys.argv)

    # Get overload dict
    glob.lib.set_var_overload_dict(args.overload)

    # Start builder
    if args.build:
        build_manager.init(glob)
    # Start bencher
    elif args.bench:
        bench_manager.init(glob)
    # Start capture
    elif args.capture:
        result_manager.capture_result(glob)
    # Cleanup and exit
    elif args.clean:
        glob.lib.misc.clean_temp_files()
    # Show installed and exit
    elif args.listApps:
        glob.lib.misc.show_installed()
    # Print defaults settings
    elif args.defaults:
        glob.lib.misc.print_defaults()
    # Show available and exit
    elif args.avail:
        glob.lib.misc.show_available()
    # Remove installation and exit
    elif args.delApp:
        glob.lib.misc.remove_app()
    # Query installation and exit
    elif args.queryApp:
        glob.lib.misc.query_app(args.queryApp)
    # Print cmd line history
    elif args.history:
        glob.lib.misc.print_history()
    # Query db for results
    elif args.dbResult:
        result_manager.query_db(glob)
    # Query db for application
    elif args.dbApp:
        result_manager.print_app_from_table(glob)
    # Show results and exit
    elif args.listResults:
        result_manager.list_results(glob)
    # Query result and exit
    elif args.queryResult:
        result_manager.query_result(glob, args.queryResult)
    # Remove result and exit
    elif args.delResult:
        result_manager.remove_result(glob)
    elif args.version:
        glob.lib.misc.print_version()
    elif args.last:
        glob.lib.misc.print_last()
    # No seletion provided
    else:
        print("Invalid input")
        print("Try 'benchtool --help' for more information.")

    print()
    return 0

if __name__ == "__main__":
    sys.exit(main())

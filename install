#!/bin/bash

# Main installation script for the BenchPRO site package. 
# System parameters are read from ./site.sh 

trap ctrl_c INT

function ctrl_c() {
    printf "\nQuitting.\n"
    exit 1
}


# Print error and exit
quit() {
    printf "$1"
    exit 1
}

# Install Python package and set group permissions
install() {
    python3 setup.py install --prefix=${BP_SITE}/python/ >> $BP_LOG
    if [ $? != 0 ]; then quit "\nPackage installation failed, quitting.\n\n"; fi
    # Change group permissions
    chmod a+rX          ${BP_SITE}
    chmod -R a+rX       ${BP_SITE}/python
    chmod a+x           ${BP_SITE}/python/bin/benchpro
    chmod a+rwx         ${BP_SITE}/collection
    # Update symlink
    ln -s python/lib/python${PY_VERSION}/site-packages/benchpro-latest/ ${BP_SITE}/package
    ln -s benchpro-${BP_SITE_VERSION}-py${PY_VERSION}.egg/ ${BP_SITE}/python/lib/python${PY_VERSION}/site-packages/benchpro-latest
    printf "\nPackage installed...\n\n"
}

WORKING_DIR=`pwd`

# Source site variables
SOURCE_FILE="$WORKING_DIR/site.sh"
printf "Reading ${SOURCE_FILE}...\n"
source $SOURCE_FILE
[[ $? != 0 ]] && quit "\nCan't source ${SOURCE_FILE}, quitting.\n\n"

# Test that BP_SITE is writable
mkdir -p $BP_SITE && printf "We have write permission.\n" || quit "\nCan't write to ${BP_SITE}, quitting.\n\n" 

# Get path to SSH key - not stored in repo
SSH_KEY=""
if [[ "$1" = "" ]]; then
    printf "WARNING: No SSH key provided, will attempt to continue with default user key..."
    SSH_KEY=$HOME/.ssh/id_rsa
# Quick install
elif [[ "$1" = "-d" ]]; then
    printf "Debug mode"
    install
    exit 0
else
    SSH_KEY=$1
fi

# Check if SSH key exists
[[ ! -f "$SSH_KEY" ]] && quit "\nProvided SSH key not found.\nQuitting.\n\n"

# Clean up env & build/install directories
${WORKING_DIR}/dev/clean.sh
rm -rf  ${BP_SITE}/python/lib/python${PY_VERSION}/site-packages/benchpro-${BP_SITE_VERSION}*
rm -f   ${BP_SITE}/modulefiles/benchpro/*.lua
rm -f   ${BP_SITE}/package
rm -f   ${BP_SITE}/python/lib/python${PY_VERSION}/site-packages/benchpro-latest

# Setup
mkdir -p ${BP_SITE}/logs
mkdir -p ${BP_SITE}/repo
mkdir -p ${BP_SITE}/collection
mkdir -p ${BP_SITE}/python/lib/python${PY_VERSION}/site-packages
mkdir -p ${BP_SITE}/modulefiles/benchpro

printf "\nCleaned up...\n\n"

# Copy  and contextualize module file
cp ${WORKING_DIR}/data/modulefiles/benchpro.lua                         ${BP_SITE}/modulefiles/benchpro/${BP_SITE_VERSION}.lua
sed -i "/local bp_dev/c\local bp_dev = \"${BP_DEV}\""                   ${BP_SITE}/modulefiles/benchpro/${BP_SITE_VERSION}.lua
sed -i "/local bp_site/c\local bp_site = \"${BP_SITE}\""                ${BP_SITE}/modulefiles/benchpro/${BP_SITE_VERSION}.lua
sed -i "/local bp_repo/c\local bp_repo = \"${BP_REPO}\""                ${BP_SITE}/modulefiles/benchpro/${BP_SITE_VERSION}.lua
sed -i "/local tacc_scratch/c\local tacc_scratch = \"${TACC_SCRATCH}\"" ${BP_SITE}/modulefiles/benchpro/${BP_SITE_VERSION}.lua
sed -i "/local bp_home/c\local bp_home = \"${BP_HOME}\""                ${BP_SITE}/modulefiles/benchpro/${BP_SITE_VERSION}.lua
sed -i "/local bp_apps/c\local bp_apps = \"${BP_APPS}\""                ${BP_SITE}/modulefiles/benchpro/${BP_SITE_VERSION}.lua
sed -i "/local bp_results/c\local bp_results = \"${BP_RESULTS}\""       ${BP_SITE}/modulefiles/benchpro/${BP_SITE_VERSION}.lua
sed -i "/local bp_version/c\local bp_version = \"${BP_SITE_VERSION}\""  ${BP_SITE}/modulefiles/benchpro/${BP_SITE_VERSION}.lua
sed -i "/local build_hash/c\local build_hash = \"${BUILD_HASH}\""       ${BP_SITE}/modulefiles/benchpro/${BP_SITE_VERSION}.lua
sed -i "/local build_date/c\local build_date = \"${BUILD_DATE}\""       ${BP_SITE}/modulefiles/benchpro/${BP_SITE_VERSION}.lua
sed -i "/local py_version/c\local py_version = \"${PY_VERSION}\""       ${BP_SITE}/modulefiles/benchpro/${BP_SITE_VERSION}.lua
chmod -R a+rX                                                           ${BP_SITE}/modulefiles
chmod a+w                                                               ${BP_SITE}/repo
chmod -R a+rX                                                           ${BP_SITE}/repo

ml use ${BP_SITE}/modulefiles
ml benchpro || quit "\nCan't load module, quitting.\n\n"

printf "\nModule loaded...\n\n"

# Install python package
install

# Install user files 
YOUR_BP=$(eval echo $BP_HOME)
[[ ! -d $YOUR_BP ]] && git clone https://github.com/TACC/benchpro.git $YOUR_BP || git -C $YOUR_BP pull 

[[ $? != 0 ]] && quit "\nUser files install failed, quitting.\n\n"

benchpro --validate | tee -a $BP_LOG || quit "\nValidation failed, quitting.\n\n"

printf "\nValidation complete...\n\n"

# Check version
benchpro --version || quit "\nVersion check failed, quitting.\n\n"

# Clean build files
${WORKING_DIR}/dev/clean.sh

# Check SSH connection
printf "Testing Connection to DB...\n"
ssh -i ${SSH_KEY} ${DB_USER}@${DB_HOST} -t "echo 'Connection test'" > /dev/null 2>&1
[[ $? != 0 ]] && quit "\nSSH connection failed, quitting.\n\n"

if [[ -z $BP_DEV ]]; then 

    echo
    echo "------------------------------------------------"
    echo "Benchtool successfully installed into $BP_SITE"
    echo "User files installed into $BP_HOME for testing"
    echo "To use, load site module with:"
    echo "ml use $BP_SITE/modulefiles"
    echo "ml benchpro"
    echo
    echo "------------------------------------------------"
    echo "Add the following lines to your crontab:"
    echo "5 * * * * /bin/rsync --remove-source-files -av -e \"ssh -i $SSH_KEY\" $BP_SITE/collection/* $DB_USER@$DB_HOST:$REMOTE_PATH/ >> $BP_SITE/logs/collect_\`date +\\%Y\\-%m-%d\`.log 2>&1"
    echo "0 0 * * * /bin/rsync -av /home1/06280/mcawood/work2/repo_backup/ $BP_SITE/repo/ | tee -a $BP_SITE/logs/repo_\`date +\\%Y\\-%m-%d\`.log"
    echo 
fi

echo "Done."

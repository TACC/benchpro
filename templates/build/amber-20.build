
export     build_path=<<<build_path>>>
export   install_path=<<<install_path>>>
export benchmark_repo=<<<benchmark_repo>>>
export       compiler=<<<compiler>>>
export            mpi=<<<mpi>>>
export           cuda=<<<cuda>>>
export        version=<<<version>>>
export      opt_flags=<<<opt_flags>>>
export            exe=<<<exe>>>

date
echo "Slurm Job ID: ${SLURM_JOB_ID}"
echo "Host: ${HOSTNAME}"
echo "User: ${USER}"

ml reset
ml ${compiler}
ml ${mpi}
ml ${cuda}
ml

mkdir -p ${build_path}

tar -xf ${benchmark_repo}/Amber${version}.tar.bz2 -C ${build_path}/
tar -xf ${benchmark_repo}/AmberTools${version}.tar.bz2 -C ${build_path}/
tar -xf ${benchmark_repo}/AmberPatch${version}.tar.bz2 -C ${build_path}/

cd ${build_path}/amber${version}_src

./update_amber --update

# Build serial

./configure -mkl intel
source amber.sh
make -j12 install

# Build MPI
if [ ! -z ${mpi} ]
then
    ./configure -mkl intel
    source amber.sh
    make -j12 install
fi

# Build CUDA
if [ ! -z ${cuda} ]
then
    export CUDA_HOME=$TACC_CUDA_DIR
    ./configure -mkl intel
    source amber.sh
    make -j12 install
fi

# Build CUDA + MPI
if [ ! -z ${mpi} ] && [ ! -z ${cuda}  ]
then
    export CUDA_HOME=$TACC_CUDA_DIR
    ./configure -mkl intel
    source amber.sh
    make -j12 install
fi

mkdir -p ${install_path}
cp -r bin ${install_path}/

date

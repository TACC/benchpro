#!/usr/bin/env python3

# System Imports
import argparse
import os
import pprint as pp
import sys
from timeit import default_timer as timer

# Local Imports
#try:
import bench_manager
import build_manager
import global_settings
import splash
import result_manager
import validate_setup as validate

# Catch import exception
#except ImportError as e:
#    print("You had an import error, you might be using Python2 ?")
#    print("Please setup your environment with 'source sourceme'")
#    print(e)
#    sys.exit(1)

# Confirm BENCHTOOL is set in environment
def check_env(var):
    if not os.getenv(var.strip('$')):
        print(var + " variable not set, please run 'source sourceme'")
        sys.exit(1)

# Confirm installation has been validated
def check_validatation(val_file):
    if not os.path.isfile(val_file):
        print("Please validate benchtool setup before use with:")
        print("    benchtool --validate")
        print()
        sys.exit(1)

# Generate dict fom coma-delimited params
def get_var_overload_dict(vars_str):
    overload_dict = {} 
    if vars_str:
        settings_list = vars_str.split(':')
        for setting in settings_list:
            pair = setting.split('=')
            # Test key-value pair
            if not len(pair) == 2:
                print("Invalid overload key-value pair detected: ", setting)
                sys.exit(1)
            overload_dict[pair[0]] = pair[1]

    return overload_dict

# Write command line to history file
def write_cmd_history(glob):
    if not glob.args.history:
        history_file = os.path.join(glob.basedir, ".history")
        with open(history_file, "a") as hist: 
            hist.write(sys.argv[0].split("/")[-1] + " " + " ".join(sys.argv[1:]) + "\n")

def main():
    # Parse cmdline args
    cmd_parser = argparse.ArgumentParser(
        description='This is a benchmarking tool to automate the installation of applications, \
                    execution of benchmarks and collection of results.')

    cmd_parser.add_argument("--build", default=False,
                            type=str, help="Name of the code config file to build, run --avail to check.")
    cmd_parser.add_argument("--sched", default="system",
                            type=str, help="Name of the scheduler config file, will use system default otherwise.")

    cmd_parser.add_argument("--bench", default=False,
                            type=str, help="Name of benchmark config file to bench, run --avail to check.")

    cmd_parser.add_argument("--capture", default=False, action='store_true',
                            help="Send results to database.")
    cmd_parser.add_argument("--listResults", nargs='?', const="all", type=str,
                            help="Provide summary of benchmarks results. Default is 'all', also takes 'pending', 'complete', 'captured' or \
                                    'failed'")
    cmd_parser.add_argument("--delResult", default=False,
                            help="Deletes benchmark result from local directory, takes benchmark label, 'captured', \
                                    'failed' or 'all'")
    
    cmd_parser.add_argument("--clean", default=False, action='store_true',
                            help="Cleanup temp and log files.")
    cmd_parser.add_argument("--listApps", default=False, action='store_true',
                            help="Show all installed applications.")
    cmd_parser.add_argument("--avail", nargs='?', const="all", type=str,
                            help="Show all available application profiles. Default is 'all', also accepts 'code', 'bench' or 'suite'.")

    cmd_parser.add_argument("--setup", default=False, action='store_true',
                            help="Print default options for current system.")

    cmd_parser.add_argument("--delApp", default=False,
                            help="Remove an installed application.")

    cmd_parser.add_argument("--queryApp", default=False,
                            help="Query build report of an installed application.")
    cmd_parser.add_argument("--queryResult", default=False,
                            help="Query a local benchmark result for config info.")
    cmd_parser.add_argument("--dbResult", nargs='?', const="all", type=str,
                            help="Query database for benchmark results. Default is 'all'. Also accepts colon-delimited list \
                                    of search criteria.")
    cmd_parser.add_argument("--dbApp", default=False, type=str, help="Provide application ID to print info report from database.")

    cmd_parser.add_argument("--export", default=False, action='store_true',
                            help="Export database query to .csv file dbquery_[date].csv")

    cmd_parser.add_argument("--history", default=False, action='store_true',
                                help="Print benchtool input history.")

    cmd_parser.add_argument("--last", nargs='?', const=1, type=int,
                                help="Print query from last build or bench task.")

    cmd_parser.add_argument("--overload", default=False,
                            help="Override any setting read from cfg files. Accepts colon-delimited list of assignments.")
    cmd_parser.add_argument("--validate", default=False, action='store_true',
                            help="Run installation validator.")

    cmd_parser.add_argument("--version", default=False, action='store_true',
                            help="Print version info.")

    args = cmd_parser.parse_args()

    # Init global settings
    glob = global_settings.settings()

    # Add arg dict to global object
    glob.args = args

    # Confirm environment is configured
    check_env(glob.stg['topdir_env_var'])

    # Run validator script
    if args.validate:
        validate.check_setup(glob)
        sys.exit(0)

    # Check validate
    check_validatation(os.path.join(glob.basedir, ".validated"))

    # Write cmd to history file
    write_cmd_history(glob)

    # Get overload dict
    glob.overload_dict = get_var_overload_dict(args.overload)

    # Start builder
    if args.build:
        splash.print_splash(glob)
        build_manager.init(glob)
    # Start bencher
    elif args.bench:
        splash.print_splash(glob)
        bench_manager.init(glob)
    # Start capture
    elif args.capture:
        splash.print_splash(glob)
        result_manager.capture_result(glob)
    # Cleanup and exit
    elif args.clean:
        glob.lib.misc.clean_temp_files()
    # Show installed and exit
    elif args.listApps:
        glob.lib.misc.show_installed()
    # Print setup settings
    elif args.setup:
        glob.lib.misc.print_setup()
    # Show available and exit
    elif args.avail:
        glob.lib.misc.show_available()
    # Remove installation and exit
    elif args.delApp:
        glob.lib.misc.remove_app()
    # Query installation and exit
    elif args.queryApp:
        glob.lib.misc.query_app(args.queryApp)
    # Print cmd line history
    elif args.history:
        glob.lib.misc.print_history()
    # Query db for results
    elif args.dbResult:
        result_manager.query_db(glob)
    # Query db for application
    elif args.dbApp:
        result_manager.print_app_from_table(glob)
    # Show results and exit
    elif args.listResults:
        result_manager.list_results(glob)
    # Query result and exit
    elif args.queryResult:
        result_manager.query_result(glob, args.queryResult)
    # Remove result and exit
    elif args.delResult:
        result_manager.remove_result(glob)
    elif args.version:
        glob.lib.misc.print_version()
    elif args.last:
        glob.lib.misc.print_last()
    # No seletion provided
    else:
        print("Invalid input")
        print("Try 'benchtool --help' for more information.")

    print()
    return 0

if __name__ == "__main__":
    sys.exit(main())

=============================
Adding an Application Profile
=============================

BenchPRO requires two input files to build an application: a config file containing contextualization parameters, and a build template file which will be populated with these parameters and executed.

Application config file
-----------------

An application config file is seperated into the following sections

general
^^^^^^^
Fields for general application info are provide, such as name and version. You can also manually specify a system label, which limits this application to that specific system (useful for avoiding inadertantly building the wrong application on a given system). By default BenchPRO will attempt to match this config file with its corresponsing template file using the application name. You can overwrite this default template file by adding the :code:`template` field to this section.

modules
^^^^^^^
The section  :code:`compiler` and :code:`mpi` are required, while more modules can be specified if needed. Every module must be available on the local machine, if you are cross compiling to another platform (e.g. to frontera-rtx) and require system modules not present on the current node, you can set `check_modules=False` in settings.ini to bypass this check.

:code:`module_use` can be provided to add a nonstandard path to MODULEPATH

config
^^^^^^
where variables used in the build template script can be added.

additionally, you can define as many additional parameters as needed for your application in this section. Eg: configure flags, build options, etc. All parameters :code:`[param]` defined here will be used to fill :code:`<<<[param]>>>` variables of the same name in the template file, thus consistent naming is important.
This file must be located in :code:`$BP_HOME/build/config`, preferably with the naming scheme :code:`[label].cfg`.

files
^^^^^
This section allows the user to have BenchPRO automatically collect input files for the build process. BenchPRO currently supports :code:`local` and :code:`download` operations. If BenchPRO detects that the local or downloaded file is an archive, it will automatically extract the archive to the correct working directory. BenchPRO will search for local files in the $BP_REPO directory. The format of the file staging section is:

.. code-block::

    local = [list],[of],[files]
    download = [list],[of],[URLs]

This file staging process occurs in 1 of 2 ways, depending on the state of :code:`sync_staging` in :code:`$BP_HOME/settings.ini`. BenchPRO will either synchronously copy/download/extract during the script creation process, alternatively the file staging will occur during job execution itself. In either case BenchPRO will confirm that the file or URL specified exists before continuing. 

.. note::
   
   A detailed list of config fields are provided :ref:`here <app_config_fields>`

Build template file
-------------------

The build template file is used to gerenate a contextualized build script which will executed to compile the application. Variables are defined with :code:`<<<[param]>>>` syntax and populated with the variables defined in the config file above. If a :code:`<<<[param]>>>` in the build template is not successfully populated and :code:`exit_on_missing=True` in :code:`$BP_HOME/settings.ini`, BenchPRO will abort the build process. You are able to make use of the :code:`local_repo` variable defined in :code:`$BP_HOME/settings.ini` to store and use files locally, if you'd rather manage your input files manually. This file must be located in :code:`$BP_HOME/build/templates`, preferablly with the naming scheme :code:`[code_label].template`.

The contextualized build script generated by BenchPRO will have the format:

.. code-block::

    [scheduler options]
    [job level details]
    [export environment variables]
    [load modules]
    [file staging]
    [user section]
    [executable check]

Module template file (optional)
-------------------------------

It is possible to define your own .lua module template and store it in :code:`$BP_HOME/build/templates` with the naming scheme :code:`[code_label].module`, alternatively BenchPRO will generate a generic module file for you.

The application added above would be built with the following command:

.. code-block::

    benchpro --build [code_label]

